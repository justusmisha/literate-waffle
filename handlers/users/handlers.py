import json
import urllib.parse

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from api.endpooints import UserEndpoints
from data import config
from keyboards.users.inline.form_keyboards import market_analyze_kb, categories_kb, google_sheets_kb, after_parser_kb, \
    query_kb, query_execute_kb, start_kb, google_sheet_menu_kb, all_google_sheets_kb, seller_kb, sellers_kb
from loader import dp, bot, api_client
from states.user_state import Form, LinkParser, QueryParser, GoogleStates, SellerStates


@dp.callback_query_handler(lambda c: c.data == 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è')
async def generator_kb(call: CallbackQuery):
    await call.message.edit_text(text='–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=categories_kb)


@dp.callback_query_handler(lambda query: query.data == 'üëï –õ–∏—á–Ω—ã–µ –≤–µ—â–∏', state='*')
async def cmd_start(callback_query: CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
                           text=f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{callback_query.data}¬ª")

    await Form.personal_items.set()


@dp.callback_query_handler(lambda query: query.data == 'üó£ –£—Å–ª—É–≥–∏', state='*')
async def cmd_start(callback_query: CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
                           text=f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{callback_query.data}¬ª")

    await Form.services.set()


@dp.callback_query_handler(lambda query: query.data == 'üè° –î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏', state='*')
async def cmd_start(callback_query: CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
                           text=f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{callback_query.data}¬ª")

    await Form.for_home_and_garden.set()


@dp.callback_query_handler(lambda query: query.data == 'üõ† –ë—ã—Ç–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', state='*')
async def cmd_start(callback_query: CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
                           text=f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{callback_query.data}¬ª")

    await Form.consumer_electronics.set()


@dp.callback_query_handler(lambda query: query.data == 'üîë –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤', state='*')
async def cmd_start(callback_query: CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
                           text=f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Å–ª—É–≥—É —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")

    await Form.key_words.set()


@dp.callback_query_handler(lambda query: query.data == 'back', state='*')
async def cmd_start(callback_query: CallbackQuery):
    await callback_query.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=categories_kb)


@dp.callback_query_handler(lambda c: c.data == 'üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏', state='*')
async def market_analyze(callback_query: CallbackQuery):
    kb = await market_analyze_kb()
    await callback_query.message.edit_text(text='–ê–Ω–∞–ª–∏–∑ —Ä—ã—á–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏', reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'avito_parser_butt')
async def avito_parser(call: CallbackQuery):
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏')))


@dp.callback_query_handler(lambda c: c.data == 'link_menu')
async def link_menu(call: CallbackQuery):
    await call.message.edit_text(text='–ß—Ç–æ–±—ã c–ø–∞—Ä—Å–∏—Ç—å —Å—Å—ã–ª–∫—É –≤–≤–µ–¥–∏—Ç–µ url', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏')))
    await LinkParser.url.set()


@dp.message_handler(state=LinkParser.url)
async def link_menu_google(message: Message, state: FSMContext):
    if message.text != '/start':
        await state.update_data(url=message.text)
        kb = await google_sheets_kb()
        if isinstance(kb, str):
            await message.answer(text=kb, reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏')))
        else:
            await message.answer('URL –¥–æ–±–∞–≤–ª–µ–Ω, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ Google Sheet –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–ø–∞—Ä—à–µ–Ω–∞ —Å—Å—ã–ª–∫–∞', reply_markup=kb)
    else:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=start_kb)
        await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('exact_sheet_'), state='*')
async def link_menu_google(call: CallbackQuery, state: FSMContext):
    google_sheet_name = str(call.data.split('exact_sheet_')[-1])
    await state.update_data(google_sheet_name=google_sheet_name)
    data = await state.get_data()
    waiting_message = await call.message.answer(config.PARSING_MESSAGE)
    sheet = await api_client.post(UserEndpoints.google_sheet_by_name, json={'sheet_name': google_sheet_name})
    if sheet:
        kb = await after_parser_kb(sheet['sheets']['sheet_id'])
    result = await api_client.post(UserEndpoints.parse_one_link, json=data)
    await state.finish()

    if result:
        await waiting_message.delete()
        await call.message.edit_text(text=f'‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–∫–æ–Ω—á–µ–Ω –∑–∞–Ω—è–≤ {result["time"]} —Å–µ–∫—É–Ω–¥.', reply_markup=kb)
    else:
        await waiting_message.delete()
        await call.message.answer(text='‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏')


@dp.callback_query_handler(lambda c: c.data == 'query_menu')
async def query_menu(call: CallbackQuery):
    kb = await query_kb()
    await call.message.edit_text(text='–†–∞–±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏', reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'query_add', state='*')
async def query_add_menu(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å')
    await QueryParser.add_query.set()


@dp.message_handler(state=QueryParser.add_query)
async def query_add_handler(message: Message, state: FSMContext):
    if message.text != '/start':
        query = str(message.text)
        await state.update_data(query=query)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
        await QueryParser.add_pages.set()
    else:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=start_kb)
        await state.finish()


@dp.message_handler(state=QueryParser.add_pages)
async def query_add_handler(message: Message, state: FSMContext):
    if message.text != '/start':
        page_numbers = str(message.text)
        await state.update_data(page_numbers=page_numbers)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')
        await QueryParser.add_city.set()
    else:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=start_kb)
        await state.finish()


@dp.message_handler(state=QueryParser.add_city)
async def query_add_handler(message: Message, state: FSMContext):
    city = str(message.text)
    await state.update_data(city=city)
    data = await state.get_data()
    waiting_message = await message.answer(config.PARSING_MESSAGE)
    result = await api_client.post(UserEndpoints.save_by_query, json=data)
    try:
        if result:
            await message.answer(text='‚úÖ –ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω\n'
                                      f'–ó–∞–Ω—è–ª–æ {result["time"]} —Å–µ–∫—É–Ω–¥',
                                 reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='query_menu')))
        else:
            await message.answer(text='‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
                                 reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='query_menu')))
    except Exception as e:
        await waiting_message.delete()
    finally:
        await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'query_execute', state='*')
async def query_execute_menu(call: CallbackQuery, state: FSMContext):
    queries = await api_client.get(UserEndpoints.all_queries)
    if queries:
        kb = await query_execute_kb(queries['queries'])
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞', reply_markup=kb)
    else:
        await call.message.answer(text='‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤')


@dp.callback_query_handler(lambda c: c.data.startswith('query_execute_'), state='*')
async def query_execute_handler(call: CallbackQuery, state: FSMContext):
    query = str(call.data.split('query_execute_')[-1])
    await state.update_data(query=query)
    kb = await google_sheets_kb('exec')
    if isinstance(kb, str):
        await call.message.answer(text=kb)
    else:
        await call.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ Google Doc –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å –∑–∞–ø—Ä–æ—Å "{query}"',
                                     reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith('exec_exact_sheet_'), state='*')
async def qery_execute_google(call: CallbackQuery, state: FSMContext):
    google_sheet = str(call.data.split('exec_exact_sheet_')[-1])
    data = await state.get_data()
    waiting_message = await call.message.answer(config.PARSING_MESSAGE)
    json = {'google_sheet_name': google_sheet,
            'query': data['query']}
    result = await api_client.post(UserEndpoints.link_executor, json=json)
    sheet = await api_client.post(UserEndpoints.google_sheet_by_name, json={'sheet_name': google_sheet})
    if result:
        kb = await after_parser_kb(sheet['sheets']['sheet_id'])
        await call.message.edit_text(text='‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Google Doc', reply_markup=kb)
        await waiting_message.delete()
    else:
        await call.message.answer(text='‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤ Google Doc', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_start')))


@dp.callback_query_handler(lambda c: c.data == 'query_delete', state='*')
async def query_delete_menu(call: CallbackQuery, state: FSMContext):
    queries = await api_client.get(UserEndpoints.all_queries)
    if queries:
        kb = await query_execute_kb(queries['queries'], 'delete')
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=kb)
    else:
        await call.message.answer(text='‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤')


@dp.callback_query_handler(lambda c: c.data.startswith('delete_query_'), state='*')
async def query_delete_menu(call: CallbackQuery, state: FSMContext):
    query = str(call.data.split('delete_query_')[-1])
    result = await api_client.delete(UserEndpoints.delete_query, json={'query_name': query})
    if result:
        await call.message.edit_text(text='‚úÖ –ó–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='query_menu')))
    else:
        await call.message.answer(text='‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='query_menu')))


@dp.callback_query_handler(lambda c: c.data == 'google_sheet_menu', state='*')
async def google_sheet_menu(call: CallbackQuery, state: FSMContext):
    kb = await google_sheet_menu_kb()
    await call.message.edit_text(text='–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∑–¥–µ–ª–∞ Google Doc', reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'add_google_sheet', state='*')
async def add_google_sheet(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    await GoogleStates.sheet_name.set()


@dp.message_handler(state=GoogleStates.sheet_name)
async def sheet_name_handler(message: Message, state: FSMContext):
    sheet_name = message.text
    await state.finish()
    result = await api_client.post(UserEndpoints.create_sheet, json={'sheet_name': sheet_name})
    if result:
        await message.answer(text='‚úÖ Google Doc —Å–æ–∑–¥–∞–Ω', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='google_sheet_menu')))
    else:
        await message.answer(text='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Google Doc')


@dp.callback_query_handler(lambda c: c.data == 'all_google_sheet', state='*')
async def add_google_sheet(call: CallbackQuery, state: FSMContext):
    result = await api_client.get(UserEndpoints.all_google_sheets)
    kb = await all_google_sheets_kb(result['sheets'])
    await call.message.edit_text(text='–í—Å–µ Google –¥–æ–∫—É–º–µ–Ω—Ç—ã', reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'seller_menu', state='*')
async def seller_menu(call: CallbackQuery, state: FSMContext):
    kb = await seller_kb()
    await call.message.edit_text(text='–†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏', reply_markup=kb)
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'seller_add', state='*')
async def seller_add_menu(call: CallbackQuery, state: FSMContext):
    await SellerStates.seller_url.set()
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='seller_menu')))


@dp.message_handler(state=SellerStates.seller_url)
async def seller_add_handler(message: Message, state: FSMContext):
    await state.finish()
    url = str(message.text)
    waiting_message = await message.answer(config.PARSING_MESSAGE)
    result = await api_client.post(UserEndpoints.add_seller, json={'url': url})
    if result:
        await message.answer(text=f'‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü {result["seller_name"]} –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='seller_menu')))
        await waiting_message.delete()
    else:
        await message.answer(text='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–∞–±–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='seller_menu')))
        await waiting_message.delete()


@dp.callback_query_handler(lambda c: c.data == 'seller_execute', state='*')
async def seller_execute_menu(call: CallbackQuery, state: FSMContext):
    await state.finish()
    kb = await sellers_kb('execute')
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞', reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith('execute_seller_'), state='*')
async def seller_exec_habdlers(call: CallbackQuery, state: FSMContext):
    seller_name = str(call.data.split('execute_seller_')[-1])
    await state.update_data(seller_name=seller_name)
    kb = await google_sheets_kb('seller')
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ Google Doc –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞', reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith('seller_exact_sheet_'), state='*')
async def seller_doc_handler(call: CallbackQuery, state: FSMContext):
    google_sheet = str(call.data.split('seller_exact_sheet_')[-1])
    await state.update_data(google_sheet=google_sheet)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='seller_menu')))
    await SellerStates.page_numbers.set()


@dp.message_handler(state=SellerStates.page_numbers)
async def seller_ages_handler(message: Message, state: FSMContext):
    page_numbers = int(message.text)
    await state.update_data(page_numbers=page_numbers)
    data = await state.get_data()
    await state.finish()
    waiting_message = await message.answer(config.PARSING_MESSAGE)
    result = await api_client.post(UserEndpoints.parse_seller, json=data)

    if not result:
        await message.answer(text='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø—Ä–æ–¥–∞–≤—Ü–∞', reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='seller_menu')))
        await waiting_message.delete()
    else:
        await message.answer(text='‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü —Å–ø–∞—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='seller_menu')))
        await waiting_message.delete()


@dp.callback_query_handler(lambda c: c.data == 'seller_delete', state='*')
async def seller_delete(call: CallbackQuery, state: FSMContext):
    kb = await sellers_kb('delete')
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith('delete_seller_'), state='*')
async def seller_exec_habdlers(call: CallbackQuery, state: FSMContext):
    seller_name = str(call.data.split('delete_seller_')[-1])
    result = await api_client.delete(UserEndpoints.delete_seller, json={'seller_name': seller_name})
    if result:
        await call.message.edit_text(text='‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü —É–¥–∞–ª–µ–Ω', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='seller_menu')))
    else:
        await call.message.answer(text='‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='seller_menu')))
